name: Deploy Backend to EC2

# Trigger this workflow on manual invocation or when main is pushed and backend or market service changes
on:
  workflow_dispatch:
  push:
    branches:
      - main
    paths:
      - "**"

jobs:
  deploy:
    runs-on: ubuntu-latest

    steps:
      # Step 1: Check out the code from the GitHub repo
      - name: Checkout repository
        uses: actions/checkout@v4

      # Step 2: Set up SSH agent using the EC2 private key stored in GitHub Secrets
      - name: Set up SSH agent
        uses: webfactory/ssh-agent@v0.9.0
        with:
          ssh-private-key: ${{ secrets.EC2_SSH_PRIVATE_KEY }}

      # Step 3: SSH into EC2 instance and pull latest changes from the main branch
      - name: SSH and Pull Repo
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            cd portfolio-insights/portfolio-insights-backend
            git fetch origin main
            git reset --hard origin/main
          EOF

      # Step 4: SSH into EC2 instance and generate .env.docker file
      - name: SSH and Generate .env.docker
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            cd portfolio-insights/portfolio-insights-backend

            echo "DATABASE_HOST=${{ secrets.DATABASE_HOST }}" > .env.docker
            echo "DATABASE_PORT=${{ secrets.DATABASE_PORT }}" >> .env.docker
            echo "DATABASE_NAME=${{ secrets.DATABASE_NAME }}" >> .env.docker
            echo "DATABASE_USERNAME=${{ secrets.DATABASE_USERNAME }}" >> .env.docker
            echo "DATABASE_PASSWORD=${{ secrets.DATABASE_PASSWORD }}" >> .env.docker
            echo "CORS_ORIGINS=${{ vars.FRONTEND_URL }}" >> .env.docker
            echo "GO_API_URL=${{ secrets.GO_API_URL }}" >> .env.docker
            echo "JWT_SECRET_KEY=${{ secrets.JWT_SECRET_KEY }}" >> .env.docker
          EOF

      # Step 5: SSH into EC2 instance and deploy backend
      - name: SSH and Deploy Backend
        run: |
          ssh -o StrictHostKeyChecking=no ec2-user@${{ secrets.EC2_HOST }} << EOF
            cd portfolio-insights/portfolio-insights-backend
            bash scripts/docker-deploy.sh
          EOF
